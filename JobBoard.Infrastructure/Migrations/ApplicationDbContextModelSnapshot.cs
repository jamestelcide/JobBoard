// <auto-generated />
using System;
using JobBoard.Infrastructure.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JobBoard.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("JobBoard.Core.Domain.Entities.JobListing", b =>
                {
                    b.Property<Guid>("JobID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CityAndState")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("FullDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("JobPostedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("JobType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PayRange")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("JobID");

                    b.ToTable("JobListings", (string)null);

                    b.HasData(
                        new
                        {
                            JobID = new Guid("bfbc1319-b732-4d1c-a23b-afb473014f1f"),
                            CityAndState = "Sacramento, CA",
                            CompanyName = "Tech Innovations",
                            Email = "hr@techinnovations.com",
                            FullDescription = "Seeking a software engineer with experience in web and mobile application development. Must be proficient in C# and JavaScript.",
                            JobPostedDate = new DateTime(2024, 10, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            JobTitle = "Software Engineer",
                            JobType = "FullTime",
                            PayRange = "$80,000 - $120,000"
                        },
                        new
                        {
                            JobID = new Guid("f358f000-46d2-4d56-95bc-05375645a6fc"),
                            CityAndState = "New York, NY",
                            CompanyName = "Big Data Analytics",
                            Email = "jobs@bigdata.com",
                            FullDescription = "Looking for a skilled data scientist to analyze large datasets and help drive data-driven decisions.",
                            JobPostedDate = new DateTime(2024, 10, 22, 0, 0, 0, 0, DateTimeKind.Utc),
                            JobTitle = "Data Scientist",
                            JobType = "FullTime",
                            PayRange = "$90,000 - $130,000"
                        },
                        new
                        {
                            JobID = new Guid("d5b88e15-0303-4382-9f27-a1c6f0a97b66"),
                            CityAndState = "Austin, TX",
                            CompanyName = "Creative Solutions",
                            Email = "contact@creativesolutions.com",
                            FullDescription = "Seeking a UX/UI designer to create user-centered designs for our web and mobile products.",
                            JobPostedDate = new DateTime(2024, 10, 25, 0, 0, 0, 0, DateTimeKind.Utc),
                            JobTitle = "UX/UI Designer",
                            JobType = "PartTime",
                            PayRange = "$70,000 - $95,000"
                        },
                        new
                        {
                            JobID = new Guid("2ca7dd51-69a2-44b9-aa5a-b9932eab315c"),
                            CityAndState = "Los Angeles, CA",
                            CompanyName = "BrandMakers",
                            Email = "recruitment@brandmakers.com",
                            FullDescription = "We are looking for a marketing specialist to handle our social media campaigns and drive customer engagement.",
                            JobPostedDate = new DateTime(2024, 10, 26, 0, 0, 0, 0, DateTimeKind.Utc),
                            JobTitle = "Marketing Specialist",
                            JobType = "PartTime",
                            PayRange = "$60,000 - $85,000"
                        },
                        new
                        {
                            JobID = new Guid("aabb5fcb-35f7-4cd1-b97e-ff3e6e737a4d"),
                            CityAndState = "Denver, CO",
                            CompanyName = "BuildRight",
                            Email = "careers@buildright.com",
                            FullDescription = "Experienced project manager needed for overseeing construction projects. PMP certification preferred.",
                            JobPostedDate = new DateTime(2024, 10, 28, 0, 0, 0, 0, DateTimeKind.Utc),
                            JobTitle = "Project Manager",
                            JobType = "PartTime",
                            PayRange = "$75,000 - $110,000"
                        },
                        new
                        {
                            JobID = new Guid("44386e74-2cef-405f-816c-5a7ae480ab95"),
                            CityAndState = "Chicago, IL",
                            CompanyName = "SalesHub",
                            Email = "join@saleshub.com",
                            FullDescription = "We are hiring sales representatives to expand our client base. Experience in B2B sales is a plus.",
                            JobPostedDate = new DateTime(2024, 10, 29, 0, 0, 0, 0, DateTimeKind.Utc),
                            JobTitle = "Sales Representative",
                            JobType = "Internship",
                            PayRange = "$50,000 - $75,000"
                        },
                        new
                        {
                            JobID = new Guid("7bb130c5-4492-43a0-bf26-b79cefb9c395"),
                            CityAndState = "Seattle, WA",
                            CompanyName = "WriteWorks",
                            Email = "hr@writeworks.com",
                            FullDescription = "Seeking a content writer with experience in creating SEO-friendly articles and blog posts.",
                            JobPostedDate = new DateTime(2024, 11, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            JobTitle = "Content Writer",
                            JobType = "Remote",
                            PayRange = "$45,000 - $65,000"
                        },
                        new
                        {
                            JobID = new Guid("0e1f6488-acd8-44da-8496-8f7690fe711d"),
                            CityAndState = "Phoenix, AZ",
                            CompanyName = "Supportify",
                            Email = "apply@supportify.com",
                            FullDescription = "We need a customer support specialist to assist clients with product-related inquiries. Previous support experience is preferred.",
                            JobPostedDate = new DateTime(2024, 11, 2, 0, 0, 0, 0, DateTimeKind.Utc),
                            JobTitle = "Customer Support Specialist",
                            JobType = "Remote",
                            PayRange = "$40,000 - $60,000"
                        },
                        new
                        {
                            JobID = new Guid("0e865692-297b-42d3-9518-cfa48cdf4e47"),
                            CityAndState = "Miami, FL",
                            CompanyName = "DesignPro",
                            Email = "talent@designpro.com",
                            FullDescription = "Looking for a creative graphic designer to create visuals for our brand. Experience with Adobe Suite is required.",
                            JobPostedDate = new DateTime(2024, 11, 3, 0, 0, 0, 0, DateTimeKind.Utc),
                            JobTitle = "Graphic Designer",
                            JobType = "FullTime",
                            PayRange = "$55,000 - $80,000"
                        },
                        new
                        {
                            JobID = new Guid("dcc51691-e4de-4571-9969-b4b0a56fa689"),
                            CityAndState = "Boston, MA",
                            CompanyName = "FinServe",
                            Email = "jobs@finserve.com",
                            FullDescription = "We are looking for a financial analyst with experience in forecasting and budgeting. CFA certification is a plus.",
                            JobPostedDate = new DateTime(2024, 11, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            JobTitle = "Financial Analyst",
                            JobType = "FullTime",
                            PayRange = "$85,000 - $110,000"
                        });
                });

            modelBuilder.Entity("JobBoard.Core.Domain.IdentityEntities.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("JobBoard.Core.Domain.IdentityEntities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpirationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("JobBoard.Core.Domain.IdentityEntities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("JobBoard.Core.Domain.IdentityEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("JobBoard.Core.Domain.IdentityEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("JobBoard.Core.Domain.IdentityEntities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobBoard.Core.Domain.IdentityEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("JobBoard.Core.Domain.IdentityEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
